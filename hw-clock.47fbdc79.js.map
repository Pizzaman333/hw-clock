{"mappings":"ACuEE,MAAM,EAAQ,IAAI,KACZ,EAAO,AAAqB,KAArB,EAAM,QAAQ,IAAa,EAAM,OAAO,GAAK,GAAK,EAAM,WAAW,GAAK,EAAI,EAAM,WAAW,GACpG,EAAgB,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAA,CAAM,EAGhD,IA7CF,MACI,YAAY,CAAA,SAAE,CAAQ,CAAA,WAAE,CAAU,CAAE,CAAE,CACpC,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,WAAW,CAAG,SAAS,aAAa,CAAC,IAAI,CAAC,QAAQ,EACvD,IAAI,CAAC,KAAK,EACZ,CAEA,OAAQ,CACN,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,UAAU,CAAG,YAAY,IAAM,IAAI,CAAC,WAAW,GAAI,IAC1D,CAEA,aAAc,CACZ,IAAM,EAAM,IAAI,KACV,EAAO,IAAI,CAAC,UAAU,CAAG,EAE/B,GAAI,GAAQ,EAAG,CACb,cAAc,IAAI,CAAC,UAAU,EAC7B,IAAI,CAAC,WAAW,CAAC,CAAE,KAAM,EAAG,MAAO,EAAG,KAAM,EAAG,KAAM,CAAE,GACvD,MACF,CAEA,IAAM,EAAO,KAAK,KAAK,CAAC,EAAQ,OAC1B,EAAQ,KAAK,KAAK,CAAE,EAAQ,MAAyB,MACrD,EAAO,KAAK,KAAK,CAAE,EAAQ,KAAoB,KAC/C,EAAO,KAAK,KAAK,CAAE,EAAQ,IAAc,KAE/C,IAAI,CAAC,WAAW,CAAC,CAAE,KAAA,EAAM,MAAA,EAAO,KAAA,EAAM,KAAA,CAAK,EAC7C,CAEA,YAAY,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAA,KAAE,CAAI,CAAA,KAAE,CAAI,CAAE,CAAE,CACvC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,uBAAuB,WAAW,CAAG,EACpE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,wBAAwB,WAAW,CAAG,EACrE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,uBAAuB,WAAW,CAAG,EACpE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,uBAAuB,WAAW,CAAG,CACtE,CACF,EAQmB,CACjB,SAAU,WACV,WAAY,CACd","sources":["<anon>","src/main.js"],"sourcesContent":["var $2b6e161c9edcf319$exports = {};\n// new CountdownTimer({\n//     selector: '#timer-1',\n//     targetDate: new Date('Jul 17, 2019'),\n//   });\n//   /*\n//  * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\n//  * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\n//  */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n// ​\n// /*\n//  * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\n//  * залишку% і ділимо його на кількість мілісекунд в одній годині\n//  * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\n//  */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n// ​\n// /*\n//  * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\n//  * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\n//  */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n// ​\n// /*\n//  * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\n//  * миллисекунд в одной секунде (1000)\n//  */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\nclass $2b6e161c9edcf319$var$CountdownTimer {\n    constructor({ selector: selector, targetDate: targetDate }){\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.timerFields = document.querySelector(this.selector);\n        this.start();\n    }\n    start() {\n        this.updateTimer();\n        this.intervalId = setInterval(()=>this.updateTimer(), 1000);\n    }\n    updateTimer() {\n        const now = new Date();\n        const time = this.targetDate - now;\n        if (time <= 0) {\n            clearInterval(this.intervalId);\n            this.displayTime({\n                days: 0,\n                hours: 0,\n                mins: 0,\n                secs: 0\n            });\n            return;\n        }\n        const days = Math.floor(time / 86400000);\n        const hours = Math.floor(time % 86400000 / 3600000);\n        const mins = Math.floor(time % 3600000 / 60000);\n        const secs = Math.floor(time % 60000 / 1000);\n        this.displayTime({\n            days: days,\n            hours: hours,\n            mins: mins,\n            secs: secs\n        });\n    }\n    displayTime({ days: days, hours: hours, mins: mins, secs: secs }) {\n        this.timerFields.querySelector('[data-value=\"days\"]').textContent = days;\n        this.timerFields.querySelector('[data-value=\"hours\"]').textContent = hours;\n        this.timerFields.querySelector('[data-value=\"mins\"]').textContent = mins;\n        this.timerFields.querySelector('[data-value=\"secs\"]').textContent = secs;\n    }\n}\n// Dynamically calculate the next Christmas\nconst $2b6e161c9edcf319$var$today = new Date();\nconst $2b6e161c9edcf319$var$year = $2b6e161c9edcf319$var$today.getMonth() === 11 && $2b6e161c9edcf319$var$today.getDate() > 25 ? $2b6e161c9edcf319$var$today.getFullYear() + 1 : $2b6e161c9edcf319$var$today.getFullYear();\nconst $2b6e161c9edcf319$var$nextChristmas = new Date(`Dec 25, ${$2b6e161c9edcf319$var$year}`);\nnew $2b6e161c9edcf319$var$CountdownTimer({\n    selector: '#timer-1',\n    targetDate: $2b6e161c9edcf319$var$nextChristmas\n});\n\n\n//# sourceMappingURL=hw-clock.47fbdc79.js.map\n","// new CountdownTimer({\r\n//     selector: '#timer-1',\r\n//     targetDate: new Date('Jul 17, 2019'),\r\n//   });\r\n\r\n//   /*\r\n//  * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\r\n//  * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\r\n//  */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n// ​\r\n// /*\r\n//  * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\r\n//  * залишку% і ділимо його на кількість мілісекунд в одній годині\r\n//  * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\r\n//  */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n// ​\r\n// /*\r\n//  * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\r\n//  * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\r\n//  */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n// ​\r\n// /*\r\n//  * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\r\n//  * миллисекунд в одной секунде (1000)\r\n//  */\r\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n\r\nclass CountdownTimer {\r\n    constructor({ selector, targetDate }) {\r\n      this.selector = selector;\r\n      this.targetDate = targetDate;\r\n      this.timerFields = document.querySelector(this.selector);\r\n      this.start();\r\n    }\r\n  \r\n    start() {\r\n      this.updateTimer();\r\n      this.intervalId = setInterval(() => this.updateTimer(), 1000);\r\n    }\r\n  \r\n    updateTimer() {\r\n      const now = new Date();\r\n      const time = this.targetDate - now;\r\n  \r\n      if (time <= 0) {\r\n        clearInterval(this.intervalId);\r\n        this.displayTime({ days: 0, hours: 0, mins: 0, secs: 0 });\r\n        return;\r\n      }\r\n  \r\n      const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n      const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n      const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n  \r\n      this.displayTime({ days, hours, mins, secs });\r\n    }\r\n  \r\n    displayTime({ days, hours, mins, secs }) {\r\n      this.timerFields.querySelector('[data-value=\"days\"]').textContent = days;\r\n      this.timerFields.querySelector('[data-value=\"hours\"]').textContent = hours;\r\n      this.timerFields.querySelector('[data-value=\"mins\"]').textContent = mins;\r\n      this.timerFields.querySelector('[data-value=\"secs\"]').textContent = secs;\r\n    }\r\n  }\r\n  \r\n  // Dynamically calculate the next Christmas\r\n  const today = new Date();\r\n  const year = today.getMonth() === 11 && today.getDate() > 25 ? today.getFullYear() + 1 : today.getFullYear();\r\n  const nextChristmas = new Date(`Dec 25, ${year}`);\r\n  \r\n  \r\n  new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: nextChristmas,\r\n  });"],"names":["$2b6e161c9edcf319$var$today","Date","$2b6e161c9edcf319$var$year","getMonth","getDate","getFullYear","$2b6e161c9edcf319$var$nextChristmas","constructor","selector","targetDate","timerFields","document","querySelector","start","updateTimer","intervalId","setInterval","now","time","clearInterval","displayTime","days","hours","mins","secs","Math","floor","textContent"],"version":3,"file":"hw-clock.47fbdc79.js.map"}